version: '3.8'

services:
######## POSTGRES ########
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: gpts
      POSTGRES_PASSWORD: gpts
      POSTGRES_DB: gpts
    ports:
      - "5432:5432"
    volumes:
      - ./init-scripts:/docker-entrypoint-initdb.d
      #- ./custom-postgres.conf:/etc/postgresql/postgresql.conf
      #- ./pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./postgres-data:/var/lib/postgresql/data

    #command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf", "-c", "hba_file=/etc/postgresql/pg_hba.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gpts -d gpts"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

######## KAFKA ########
  zookeeper:
    image: bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:3.5
    ports:
      - "9092:9092"  # внешний (для приложений на 192.168.0.145)
      - "9093:9093"  # внутренний (для сервисов в docker-сети)
    depends_on:
      - zookeeper
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=EXTERNAL://:9092,INTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=EXTERNAL://192.168.0.145:9092,INTERNAL://kafka:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_NUM_PARTITIONS=50
      - KAFKA_CFG_REPLICATION_FACTOR=1
      - KAFKA_CFG_LOG_RETENTION_HOURS=1
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "kafka:9093", "--list"]
      interval: 10s
      timeout: 10s
      retries: 5

######## KAFKA-UI ########
  kafka-ui:
    image: provectuslabs/kafka-ui
    environment:
      - KAFKA_CLUSTERS_0_NAME=my-cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:9093  # адрес kafka
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8080"]
      interval: 10s
      timeout: 5s
      retries: 5

######## MONITORING ########
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:9090/-/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana-data:/var/lib/grafana
    healthcheck:
      test: ["CMD-SHELL", "echo -e 'GET /api/health HTTP/1.1\r\nHost: localhost\r\n\r\n' | nc -w 2 localhost 3000 | grep '200 OK'"]
      interval: 10s
      timeout: 5s
      retries: 5

  cadvisor:
    restart: always
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    privileged: true
    ports:
      - "8089:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/healthz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-exporter:
    restart: always
    image: danielqsj/kafka-exporter
    ports:
      - "9308:9308"
    environment:
      KAFKA_URI: kafka:9093
    command:
      - '--kafka.server=kafka:9093'
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:9308/metrics | grep kafka_brokers || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5


  postgres-exporter:
    restart: always
    image: prometheuscommunity/postgres-exporter
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://gpts:gpts@postgres:5432/gpts?sslmode=disable"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:9187/metrics | grep pg_up || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5



  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    #user: "65534"  # Пользователь nobody, от которого работает Loki //FOR PROD
    user: root      # //FOR DEV
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
      - /loki
      - /wal
      #- ./loki-wal:/wal #//FOR PROD
      #- ./loki-data:/loki #//FOR PROD

    command: -config.file=/etc/loki/config.yaml
    ports:
      - "3100:3100"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  grafana-agent:
    image: grafana/agent:v0.36.1  # Используем существующий тег
    container_name: grafana-agent
    restart: unless-stopped
    depends_on:
      loki:
        condition: service_started
    volumes:
      - ./grafana-agent.yaml:/etc/agent/agent.yaml
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: 
      - --config.file=/etc/agent/agent.yaml
    ports:
      - "12345:12345"
    healthcheck:
      test: ["CMD", "pidof", "grafana-agent"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s



######## LOAD BALANCER ########

########   nginx:
########     image: nginx
########     ports: [80:80]
########     volumes:
########       - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro


######## PRODUCT SERVICES ########

volumes:
  postgres-data:
  grafana-data:
  
